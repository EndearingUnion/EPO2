library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Sensor2 is
    port (
        clk    : in  std_logic;
        reset  : in  std_logic;
	frequency: in std_logic;
        mines : out std_logic
    );
end entity Sensor2;

architecture behavioral of Sensor2 is
    constant pulses      : natural := 205; -- Amount of rising edges

    signal pulse_counter : unsigned(31 downto 0) := (others => '0');
    signal counting_done : std_logic := '0';

begin
    -- Count the rising edges within the duration
    process(clk)
    begin
        if reset = '1' then
            pulse_counter <= (others => '0');
            counting_done <= '0';
        elsif rising_edge(clk) then
            if counting_done = '0' then
                pulse_counter <= pulse_counter + 1;
                if pulse_counter <= to_unsigned(pulses - 1, pulse_counter'length) then
                    counting_done <= '1';
                end if;
            end if;
        end if;
    end process;

    -- Set the output based on the count result
    process(counting_done)
    begin
        if counting_done = '1' then
            mines <= '1';
        else
            mines <= '0';
        end if;
    end process;

end architecture behavioral;
